[gd_scene load_steps=7 format=2]

[ext_resource path="res://Assets/OBJs/island.obj" type="ArrayMesh" id=1]

[sub_resource type="QuadMesh" id=1]
size = Vector2( 2000, 2000 )

[sub_resource type="Shader" id=2]
code = "shader_type spatial;
render_mode unshaded;

const vec3 ocean_normal = vec3(0.0, 1.0, 0.0);

uniform vec4 ocean_color :hint_color;
uniform vec4 deep_ocean_color: hint_color;
uniform float sea_level;
uniform float ocean_depth;

uniform float specular_strength;
uniform vec4 specular_color:hint_color;
uniform float specular_smoothness;
uniform vec3 sun_dir;

uniform float wave_scale = 0.6;
uniform float wave_speed = 0.7;
uniform float wave_strength:hint_range(0, 1) = 0.1;

//	Classic Perlin 3D Noise 
//	by Stefan Gustavson
//
vec4 permute(vec4 x){return mod(((x*34.0)+1.0)*x, 289.0);}
vec4 taylorInvSqrt(vec4 r){return 1.79284291400159 - 0.85373472095314 * r;}
vec4 fade(vec4 t) {return t*t*t*(t*(t*6.0-15.0)+10.0);}

float cnoise(vec4 P){
  vec4 Pi0 = floor(P); // Integer part for indexing
  vec4 Pi1 = Pi0 + 1.0; // Integer part + 1
  Pi0 = mod(Pi0, 289.0);
  Pi1 = mod(Pi1, 289.0);
  vec4 Pf0 = fract(P); // Fractional part for interpolation
  vec4 Pf1 = Pf0 - 1.0; // Fractional part - 1.0
  vec4 ix = vec4(Pi0.x, Pi1.x, Pi0.x, Pi1.x);
  vec4 iy = vec4(Pi0.yy, Pi1.yy);
  vec4 iz0 = vec4(Pi0.zzzz);
  vec4 iz1 = vec4(Pi1.zzzz);
  vec4 iw0 = vec4(Pi0.wwww);
  vec4 iw1 = vec4(Pi1.wwww);

  vec4 ixy = permute(permute(ix) + iy);
  vec4 ixy0 = permute(ixy + iz0);
  vec4 ixy1 = permute(ixy + iz1);
  vec4 ixy00 = permute(ixy0 + iw0);
  vec4 ixy01 = permute(ixy0 + iw1);
  vec4 ixy10 = permute(ixy1 + iw0);
  vec4 ixy11 = permute(ixy1 + iw1);

  vec4 gx00 = ixy00 / 7.0;
  vec4 gy00 = floor(gx00) / 7.0;
  vec4 gz00 = floor(gy00) / 6.0;
  gx00 = fract(gx00) - 0.5;
  gy00 = fract(gy00) - 0.5;
  gz00 = fract(gz00) - 0.5;
  vec4 gw00 = vec4(0.75) - abs(gx00) - abs(gy00) - abs(gz00);
  vec4 sw00 = step(gw00, vec4(0.0));
  gx00 -= sw00 * (step(0.0, gx00) - 0.5);
  gy00 -= sw00 * (step(0.0, gy00) - 0.5);

  vec4 gx01 = ixy01 / 7.0;
  vec4 gy01 = floor(gx01) / 7.0;
  vec4 gz01 = floor(gy01) / 6.0;
  gx01 = fract(gx01) - 0.5;
  gy01 = fract(gy01) - 0.5;
  gz01 = fract(gz01) - 0.5;
  vec4 gw01 = vec4(0.75) - abs(gx01) - abs(gy01) - abs(gz01);
  vec4 sw01 = step(gw01, vec4(0.0));
  gx01 -= sw01 * (step(0.0, gx01) - 0.5);
  gy01 -= sw01 * (step(0.0, gy01) - 0.5);

  vec4 gx10 = ixy10 / 7.0;
  vec4 gy10 = floor(gx10) / 7.0;
  vec4 gz10 = floor(gy10) / 6.0;
  gx10 = fract(gx10) - 0.5;
  gy10 = fract(gy10) - 0.5;
  gz10 = fract(gz10) - 0.5;
  vec4 gw10 = vec4(0.75) - abs(gx10) - abs(gy10) - abs(gz10);
  vec4 sw10 = step(gw10, vec4(0.0));
  gx10 -= sw10 * (step(0.0, gx10) - 0.5);
  gy10 -= sw10 * (step(0.0, gy10) - 0.5);

  vec4 gx11 = ixy11 / 7.0;
  vec4 gy11 = floor(gx11) / 7.0;
  vec4 gz11 = floor(gy11) / 6.0;
  gx11 = fract(gx11) - 0.5;
  gy11 = fract(gy11) - 0.5;
  gz11 = fract(gz11) - 0.5;
  vec4 gw11 = vec4(0.75) - abs(gx11) - abs(gy11) - abs(gz11);
  vec4 sw11 = step(gw11, vec4(0.0));
  gx11 -= sw11 * (step(0.0, gx11) - 0.5);
  gy11 -= sw11 * (step(0.0, gy11) - 0.5);

  vec4 g0000 = vec4(gx00.x,gy00.x,gz00.x,gw00.x);
  vec4 g1000 = vec4(gx00.y,gy00.y,gz00.y,gw00.y);
  vec4 g0100 = vec4(gx00.z,gy00.z,gz00.z,gw00.z);
  vec4 g1100 = vec4(gx00.w,gy00.w,gz00.w,gw00.w);
  vec4 g0010 = vec4(gx10.x,gy10.x,gz10.x,gw10.x);
  vec4 g1010 = vec4(gx10.y,gy10.y,gz10.y,gw10.y);
  vec4 g0110 = vec4(gx10.z,gy10.z,gz10.z,gw10.z);
  vec4 g1110 = vec4(gx10.w,gy10.w,gz10.w,gw10.w);
  vec4 g0001 = vec4(gx01.x,gy01.x,gz01.x,gw01.x);
  vec4 g1001 = vec4(gx01.y,gy01.y,gz01.y,gw01.y);
  vec4 g0101 = vec4(gx01.z,gy01.z,gz01.z,gw01.z);
  vec4 g1101 = vec4(gx01.w,gy01.w,gz01.w,gw01.w);
  vec4 g0011 = vec4(gx11.x,gy11.x,gz11.x,gw11.x);
  vec4 g1011 = vec4(gx11.y,gy11.y,gz11.y,gw11.y);
  vec4 g0111 = vec4(gx11.z,gy11.z,gz11.z,gw11.z);
  vec4 g1111 = vec4(gx11.w,gy11.w,gz11.w,gw11.w);

  vec4 norm00 = taylorInvSqrt(vec4(dot(g0000, g0000), dot(g0100, g0100), dot(g1000, g1000), dot(g1100, g1100)));
  g0000 *= norm00.x;
  g0100 *= norm00.y;
  g1000 *= norm00.z;
  g1100 *= norm00.w;

  vec4 norm01 = taylorInvSqrt(vec4(dot(g0001, g0001), dot(g0101, g0101), dot(g1001, g1001), dot(g1101, g1101)));
  g0001 *= norm01.x;
  g0101 *= norm01.y;
  g1001 *= norm01.z;
  g1101 *= norm01.w;

  vec4 norm10 = taylorInvSqrt(vec4(dot(g0010, g0010), dot(g0110, g0110), dot(g1010, g1010), dot(g1110, g1110)));
  g0010 *= norm10.x;
  g0110 *= norm10.y;
  g1010 *= norm10.z;
  g1110 *= norm10.w;

  vec4 norm11 = taylorInvSqrt(vec4(dot(g0011, g0011), dot(g0111, g0111), dot(g1011, g1011), dot(g1111, g1111)));
  g0011 *= norm11.x;
  g0111 *= norm11.y;
  g1011 *= norm11.z;
  g1111 *= norm11.w;

  float n0000 = dot(g0000, Pf0);
  float n1000 = dot(g1000, vec4(Pf1.x, Pf0.yzw));
  float n0100 = dot(g0100, vec4(Pf0.x, Pf1.y, Pf0.zw));
  float n1100 = dot(g1100, vec4(Pf1.xy, Pf0.zw));
  float n0010 = dot(g0010, vec4(Pf0.xy, Pf1.z, Pf0.w));
  float n1010 = dot(g1010, vec4(Pf1.x, Pf0.y, Pf1.z, Pf0.w));
  float n0110 = dot(g0110, vec4(Pf0.x, Pf1.yz, Pf0.w));
  float n1110 = dot(g1110, vec4(Pf1.xyz, Pf0.w));
  float n0001 = dot(g0001, vec4(Pf0.xyz, Pf1.w));
  float n1001 = dot(g1001, vec4(Pf1.x, Pf0.yz, Pf1.w));
  float n0101 = dot(g0101, vec4(Pf0.x, Pf1.y, Pf0.z, Pf1.w));
  float n1101 = dot(g1101, vec4(Pf1.xy, Pf0.z, Pf1.w));
  float n0011 = dot(g0011, vec4(Pf0.xy, Pf1.zw));
  float n1011 = dot(g1011, vec4(Pf1.x, Pf0.y, Pf1.zw));
  float n0111 = dot(g0111, vec4(Pf0.x, Pf1.yzw));
  float n1111 = dot(g1111, Pf1);

  vec4 fade_xyzw = fade(Pf0);
  vec4 n_0w = mix(vec4(n0000, n1000, n0100, n1100), vec4(n0001, n1001, n0101, n1101), fade_xyzw.w);
  vec4 n_1w = mix(vec4(n0010, n1010, n0110, n1110), vec4(n0011, n1011, n0111, n1111), fade_xyzw.w);
  vec4 n_zw = mix(n_0w, n_1w, fade_xyzw.z);
  vec2 n_yzw = mix(n_zw.xy, n_zw.zw, fade_xyzw.y);
  float n_xyzw = mix(n_yzw.x, n_yzw.y, fade_xyzw.x);
  return 2.2 * n_xyzw;
}

void vertex()
{
	POSITION = vec4(VERTEX, 1.0);
}

float plaIntersect( in vec3 ro, in vec3 rd, in vec4 p)
{
	float dst = -(dot(ro, p.xyz) + p.w)/dot(rd, p.xyz);
	dst = dst<0.0?99999.0:dst;
	return dst;
}

void fragment()
{
	float depth = texture(DEPTH_TEXTURE, SCREEN_UV).x;
	vec3 ndc = vec3(SCREEN_UV, depth) * 2.0 -1.0;
	vec4 view = INV_PROJECTION_MATRIX * vec4(ndc, 1.0);
	vec4 pos = CAMERA_MATRIX * view;
	pos.xyz /= pos.w;
	
	view.xyz /= view.w;
	float linear_depth = -view.z;
	
	vec3 camera_pos = (CAMERA_MATRIX * vec4(0.0 , 0.0, 0.0, 1.0)).xyz;
	vec3 ray_dir = (pos.xyz - camera_pos)/linear_depth;
	
	float dstToOcean = plaIntersect(camera_pos, ray_dir, vec4(ocean_normal, -sea_level));
	float oceanViewDepth = linear_depth - dstToOcean;
	
	if(oceanViewDepth > 0.0)
	{
		float t = 1.0 - exp(-oceanViewDepth/ ocean_depth);
		
		vec3 oceanIntersection = camera_pos + ray_dir * dstToOcean;
		vec3 wave_normal = vec3(cnoise(vec4(oceanIntersection.xz * wave_scale, 0.0, 1.0)));
		wave_normal = mix(ocean_normal, wave_normal, wave_strength);
		
		float specular_angle = dot(normalize(sun_dir), reflect(ray_dir, wave_normal));
		float specular_exponent = specular_angle / (1.0 - specular_smoothness);
		float specular_highlight = exp(-specular_exponent * specular_exponent);
		
		ALBEDO = mix(ocean_color, deep_ocean_color, t).xyz;
		ALBEDO += specular_highlight * specular_color.xyz * specular_strength;
	}
	else
	{
		ALBEDO = texture(SCREEN_TEXTURE, SCREEN_UV).xyz;
	}
}"

[sub_resource type="ShaderMaterial" id=3]
shader = SubResource( 2 )
shader_param/ocean_color = Color( 0.192157, 0.733333, 0.827451, 1 )
shader_param/deep_ocean_color = Color( 0.00392157, 0.415686, 0.52549, 1 )
shader_param/sea_level = 20.0
shader_param/ocean_depth = 5.0
shader_param/specular_strength = 0.2
shader_param/specular_color = Color( 0.756863, 0.807843, 0.568627, 1 )
shader_param/specular_smoothness = 0.9
shader_param/sun_dir = Vector3( 1, 1, 1 )
shader_param/wave_scale = 0.7
shader_param/wave_speed = 0.7
shader_param/wave_strength = 0.62

[sub_resource type="QuadMesh" id=4]
material = SubResource( 3 )
size = Vector2( 2, 2 )

[sub_resource type="SpatialMaterial" id=5]
albedo_color = Color( 0.403922, 0.678431, 0.403922, 1 )

[node name="Spatial" type="Spatial"]

[node name="Ocean Floor" type="MeshInstance" parent="."]
transform = Transform( 1, 0, 0, 0, -1.62921e-07, 1, 0, -1, -1.62921e-07, 0, 0, 0 )
mesh = SubResource( 1 )
material/0 = null

[node name="Water" type="MeshInstance" parent="."]
transform = Transform( 0.928342, -0.0256349, 0.370842, 0, 0.997619, 0.0689618, -0.371727, -0.0640201, 0.926132, 49.0979, 53.6251, 0 )
extra_cull_margin = 882.86
mesh = SubResource( 4 )
material/0 = null

[node name="Camera" type="Camera" parent="."]
transform = Transform( -0.245437, -0.39359, 0.885916, 0, 0.913869, 0.406009, -0.969412, 0.0996498, -0.224298, 118.197, 55.0967, -13.769 )
current = true
far = 1000.0

[node name="island" type="MeshInstance" parent="."]
mesh = ExtResource( 1 )
material/0 = SubResource( 5 )
